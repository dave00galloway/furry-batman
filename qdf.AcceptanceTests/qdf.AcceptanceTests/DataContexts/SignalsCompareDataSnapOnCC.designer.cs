using qdf.AcceptanceTests.Properties;

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace qdf.AcceptanceTests.DataContexts
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[Database(Name="Signals")]
	public partial class SignalsCompareDataSnapOnCCDataContext : DataContext
	{
		
		private static MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCompareDataSnapOnCC(CompareDataSnapOnCC instance);
    partial void UpdateCompareDataSnapOnCC(CompareDataSnapOnCC instance);
    partial void DeleteCompareDataSnapOnCC(CompareDataSnapOnCC instance);
    #endregion
		
		public SignalsCompareDataSnapOnCCDataContext() : 
				base(Settings.Default.SignalsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SignalsCompareDataSnapOnCCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SignalsCompareDataSnapOnCCDataContext(IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SignalsCompareDataSnapOnCCDataContext(string connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SignalsCompareDataSnapOnCCDataContext(IDbConnection connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Table<CompareDataSnapOnCC> CompareDataSnapOnCCs
		{
			get
			{
				return this.GetTable<CompareDataSnapOnCC>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompareDataSnapOnCC")]
	public partial class CompareDataSnapOnCC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Server;
		
		private string _Symbol;
		
		private decimal _Position;
		
		private System.DateTime _TimeStamp;
		
		private string _Source;
		
		private string _Book;
		
		private string _Section;
		
		private System.Nullable<decimal> _UsdPosition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnServerChanging(string value);
    partial void OnServerChanged();
    partial void OnSymbolChanging(string value);
    partial void OnSymbolChanged();
    partial void OnPositionChanging(decimal value);
    partial void OnPositionChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnBookChanging(string value);
    partial void OnBookChanged();
    partial void OnSectionChanging(string value);
    partial void OnSectionChanged();
    partial void OnUsdPositionChanging(System.Nullable<decimal> value);
    partial void OnUsdPositionChanged();
    #endregion
		
		public CompareDataSnapOnCC()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Server", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Server
		{
			get
			{
				return this._Server;
			}
			set
			{
				if ((this._Server != value))
				{
					this.OnServerChanging(value);
					this.SendPropertyChanging();
					this._Server = value;
					this.SendPropertyChanged("Server");
					this.OnServerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symbol", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Symbol
		{
			get
			{
				return this._Symbol;
			}
			set
			{
				if ((this._Symbol != value))
				{
					this.OnSymbolChanging(value);
					this.SendPropertyChanging();
					this._Symbol = value;
					this.SendPropertyChanged("Symbol");
					this.OnSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Decimal(24,9) NOT NULL")]
		public decimal Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Book", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Book
		{
			get
			{
				return this._Book;
			}
			set
			{
				if ((this._Book != value))
				{
					this.OnBookChanging(value);
					this.SendPropertyChanging();
					this._Book = value;
					this.SendPropertyChanged("Book");
					this.OnBookChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Section", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Section
		{
			get
			{
				return this._Section;
			}
			set
			{
				if ((this._Section != value))
				{
					this.OnSectionChanging(value);
					this.SendPropertyChanging();
					this._Section = value;
					this.SendPropertyChanged("Section");
					this.OnSectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsdPosition", DbType="Decimal(24,9)")]
		public System.Nullable<decimal> UsdPosition
		{
			get
			{
				return this._UsdPosition;
			}
			set
			{
				if ((this._UsdPosition != value))
				{
					this.OnUsdPositionChanging(value);
					this.SendPropertyChanging();
					this._UsdPosition = value;
					this.SendPropertyChanged("UsdPosition");
					this.OnUsdPositionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
