// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18052
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

using TechTalk.SpecFlow;

#pragma warning disable

namespace Alpari.QualityAssurance.SpecFlowExtensions.Specs
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ShareContextOne")]
    public partial class ShareContextOneFeature
    {
        private static TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "ShareContextOne.feature"
#line hidden

        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            var featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"),
                "ShareContextOne",
                "In order to do complicated and lengthy setup only once per test run\r\nAs a Test De" +
                "signer\r\nI want to be able to share context across features", ProgrammingLanguage.CSharp,
                ((string[]) (null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }

        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Access a static object from ShareContextOne ScenarioOne")]
        [NUnit.Framework.CategoryAttribute("selfTestContext")]
        public virtual void AccessAStaticObjectFromShareContextOneScenarioOne()
        {
            var scenarioInfo =
                new TechTalk.SpecFlow.ScenarioInfo("Access a static object from ShareContextOne ScenarioOne",
                    new string[]
                    {
                        "selfTestContext"
                    });
#line 7
            this.ScenarioSetup(scenarioInfo);
#line 8
            testRunner.Given("I access the static object", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "Given ");
#line 9
            testRunner.When("I display the static object \"timeNowIs\" property", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line 10
            testRunner.And("I display the static object \"randomFileName\" property", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 11
            testRunner.Then("the static object \"timeNowIs\" property matches the feature \"timeNowIs\" property",
                ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 12
            testRunner.And("the static object \"randomFileName\" property matches the feature \"randomFileName\" " +
                           "property", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Access a static object from ShareContextOne ScenarioTwo")]
        [NUnit.Framework.CategoryAttribute("selfTestContext")]
        public virtual void AccessAStaticObjectFromShareContextOneScenarioTwo()
        {
            var scenarioInfo =
                new TechTalk.SpecFlow.ScenarioInfo("Access a static object from ShareContextOne ScenarioTwo",
                    new string[]
                    {
                        "selfTestContext"
                    });
#line 15
            this.ScenarioSetup(scenarioInfo);
#line 16
            testRunner.Given("I access the static object", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "Given ");
#line 17
            testRunner.When("I display the static object \"timeNowIs\" property", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line 18
            testRunner.And("I display the static object \"randomFileName\" property", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 19
            testRunner.Then("the static object \"timeNowIs\" property matches the feature \"timeNowIs\" property",
                ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 20
            testRunner.And("the static object \"randomFileName\" property matches the feature \"randomFileName\" " +
                           "property", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}

#pragma warning restore

#endregion