// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18052
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

using TechTalk.SpecFlow;

#pragma warning disable

namespace Alpari.QualityAssurance.SpecFlowExtensions.Specs
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SpecflowZapiReporterParser")]
    [NUnit.Framework.CategoryAttribute("Reporting")]
    public partial class SpecflowZapiReporterParserFeature
    {
        private static TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "SpecflowZapiReporterParser.feature"
#line hidden

        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            var featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"),
                "SpecflowZapiReporterParser",
                "In order to upload Specflow test results to Zephyr\r\nAs a Test Designer\r\nI want to" +
                " be able to load specflow test results into memory", ProgrammingLanguage.CSharp, new string[]
                {
                    "Reporting"
                });
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }

        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        public virtual void FeatureBackground()
        {
#line 8
#line hidden
#line 9
            testRunner.Given("I have an xml test result file", "TestData\\TestResult.xml",
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line hidden
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load an xml result file and find a single test result")]
        public virtual void LoadAnXmlResultFileAndFindASingleTestResult()
        {
            var scenarioInfo =
                new TechTalk.SpecFlow.ScenarioInfo("Load an xml result file and find a single test result",
                    ((string[]) (null)));
#line 14
            this.ScenarioSetup(scenarioInfo);
#line 8
            this.FeatureBackground();
#line 15
            testRunner.Then("the xml root Name property is \"test-results\"", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load an xml result file and find a test result")]
        public virtual void LoadAnXmlResultFileAndFindATestResult()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load an xml result file and find a test result",
                ((string[]) (null)));
#line 17
            this.ScenarioSetup(scenarioInfo);
#line 8
            this.FeatureBackground();
#line 18
            testRunner.When("I parse the xml test result file as test-results", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line 19
            testRunner.Then(
                "test-results with a \"name\" attribute value of \"C:\\svn\\local\\BakeryDemoTest\\trunk\\" +
                "AllBakeryDemoTestProjects\\FIX_SpecflowTests\\bin\\Release\\FIX_SpecflowTests.dll\" e" +
                "xists", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load an xml result file and find a test result\'s values")]
        public virtual void LoadAnXmlResultFileAndFindATestResultSValues()
        {
            var scenarioInfo =
                new TechTalk.SpecFlow.ScenarioInfo("Load an xml result file and find a test result\'s values",
                    ((string[]) (null)));
#line 21
            this.ScenarioSetup(scenarioInfo);
#line 8
            this.FeatureBackground();
#line 22
            testRunner.When("I parse the xml test result file as test-results", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line hidden
            var table1 = new TechTalk.SpecFlow.Table(new string[]
            {
                "name",
                "total",
                "errors",
                "failures",
                "notrun",
                "inconclusive",
                "ignored",
                "skipped",
                "invalid",
                "date",
                "time"
            });
            table1.AddRow(new string[]
            {
                "C:\\svn\\local\\BakeryDemoTest\\trunk\\AllBakeryDemoTestProjects\\FIX_SpecflowTests\\bin" +
                "\\Release\\FIX_SpecflowTests.dll",
                "7",
                "1",
                "0",
                "0",
                "0",
                "0",
                "0",
                "0",
                "2014-01-27",
                "14:07:06"
            });
#line 23
            testRunner.Then("a test-results object with the following attribute values exists:", ((string) (null)),
                table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load an xml result file and find a test result\'s values negative")]
        [NUnit.Framework.CategoryAttribute("negative")]
        public virtual void LoadAnXmlResultFileAndFindATestResultSValuesNegative()
        {
            var scenarioInfo =
                new TechTalk.SpecFlow.ScenarioInfo("Load an xml result file and find a test result\'s values negative",
                    new string[]
                    {
                        "negative"
                    });
#line 30
            this.ScenarioSetup(scenarioInfo);
#line 8
            this.FeatureBackground();
#line 31
            testRunner.When("I parse the xml test result file as test-results", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line hidden
            var table2 = new TechTalk.SpecFlow.Table(new string[]
            {
                "name",
                "total",
                "errors",
                "failures",
                "notrun",
                "inconclusive",
                "ignored",
                "skipped",
                "invalid",
                "date",
                "time"
            });
            table2.AddRow(new string[]
            {
                "C:\\svn\\local\\BakeryDemoTest\\trunk\\AllBakeryDemoTestProjects\\FIX_SpecflowTests\\bin" +
                "\\Debug\\FIX_SpecflowTests.dll",
                "6",
                "2",
                "2",
                "1",
                "1",
                "4",
                "6",
                "8",
                "2014-03-27",
                "14:05:06"
            });
#line 32
            testRunner.Then("a test-results object with the following attribute values exists:", ((string) (null)),
                table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load an xml result file and find an environment")]
        public virtual void LoadAnXmlResultFileAndFindAnEnvironment()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load an xml result file and find an environment",
                ((string[]) (null)));
#line 37
            this.ScenarioSetup(scenarioInfo);
#line 8
            this.FeatureBackground();
#line 38
            testRunner.When("I parse the xml test result file as an environment", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line 39
            testRunner.Then("an environment with a \"nunitversion\" attribute value of \"2.6.3.13283\" exists",
                ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load an xml result file and find an environment\'s value")]
        public virtual void LoadAnXmlResultFileAndFindAnEnvironmentSValue()
        {
            var scenarioInfo =
                new TechTalk.SpecFlow.ScenarioInfo("Load an xml result file and find an environment\'s value",
                    ((string[]) (null)));
#line 41
            this.ScenarioSetup(scenarioInfo);
#line 8
            this.FeatureBackground();
#line 42
            testRunner.When("I parse the xml test result file as an environment", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line hidden
            var table3 = new TechTalk.SpecFlow.Table(new string[]
            {
                "nunitversion",
                "clrversion",
                "osversion",
                "platform",
                "cwd",
                "machinename",
                "user",
                "userdomain"
            });
            table3.AddRow(new string[]
            {
                "2.6.3.13283",
                "2.0.50727.5472",
                "Microsoft Windows NT 6.1.7601 Service Pack 1",
                "Win32NT",
                "C:\\svn\\local\\BakeryDemoTest\\trunk\\AllBakeryDemoTestProjects",
                "AUK0231NB",
                "dgalloway",
                "ALPARI-UK"
            });
#line 43
            testRunner.Then("an environment object with the following attribute values exists:", ((string) (null)),
                table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load an xml result file and find a suite")]
        public virtual void LoadAnXmlResultFileAndFindASuite()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load an xml result file and find a suite",
                ((string[]) (null)));
#line 48
            this.ScenarioSetup(scenarioInfo);
#line 8
            this.FeatureBackground();
#line 49
            testRunner.When("I parse the xml test result file as a test-suite collection", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line 50
            testRunner.Then("a test-suite with a \"name\" attribute value of \"FIX_SpecflowTests\" exists",
                ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load an xml result file and fail to find a suite")]
        [NUnit.Framework.CategoryAttribute("negative")]
        public virtual void LoadAnXmlResultFileAndFailToFindASuite()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load an xml result file and fail to find a suite",
                new string[]
                {
                    "negative"
                });
#line 53
            this.ScenarioSetup(scenarioInfo);
#line 8
            this.FeatureBackground();
#line 54
            testRunner.When("I parse the xml test result file as a test-suite collection", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line 55
            testRunner.Then("a test-suite with a \"name\" attribute value of \"made up suite\" exists",
                ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load an xml result file and find a TestFixture suite")]
        public virtual void LoadAnXmlResultFileAndFindATestFixtureSuite()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(
                "Load an xml result file and find a TestFixture suite", ((string[]) (null)));
#line 57
            this.ScenarioSetup(scenarioInfo);
#line 8
            this.FeatureBackground();
#line 58
            testRunner.When("I parse the xml test result file as a test-suite collection", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line 59
            testRunner.Then("a test-suite with a \"type\" attribute value of \"TestFixture\" exists", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load an xml result file and find test cases")]
        [NUnit.Framework.CategoryAttribute("negative")]
        public virtual void LoadAnXmlResultFileAndFindTestCases()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load an xml result file and find test cases",
                new string[]
                {
                    "negative"
                });
#line 62
            this.ScenarioSetup(scenarioInfo);
#line 8
            this.FeatureBackground();
#line 63
            testRunner.When("I parse the xml test result file as a test-suite collection", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line hidden
            var table4 = new TechTalk.SpecFlow.Table(new string[]
            {
                "test suite name",
                "test case name",
                "executed",
                "result",
                "success",
                "time",
                "asserts"
            });
            table4.AddRow(new string[]
            {
                "ShareContextOneFeature",
                "Alpari.QualityAssurance.SpecFlowExtensions.Specs.ShareContextOneFeature.AccessASt" +
                "aticObjectFromShareContextOneScenarioOne",
                "True",
                "Success",
                "True",
                "0.352",
                "2"
            });
            table4.AddRow(new string[]
            {
                "ShareContextOneFeature",
                "Alpari.QualityAssurance.SpecFlowExtensions.Specs.ShareContextOneFeature.AccessASt" +
                "aticObjectFromShareContextOneScenarioTwo",
                "True",
                "Success",
                "True",
                "0.001",
                "2"
            });
            table4.AddRow(new string[]
            {
                "ShareContextTwoFeature",
                "Alpari.QualityAssurance.SpecFlowExtensions.Specs.ShareContextTwoFeature.AccessASt" +
                "aticObjectFromShareContextTwoScenarioOne",
                "True",
                "Success",
                "True",
                "0.002",
                "2"
            });
            table4.AddRow(new string[]
            {
                "ShareContextTwoFeature",
                "Alpari.QualityAssurance.SpecFlowExtensions.Specs.ShareContextTwoFeature.AccessASt" +
                "aticObjectFromShareContextTwoScenarioTwo",
                "True",
                "Success",
                "True",
                "0.001",
                "2"
            });
            table4.AddRow(new string[]
            {
                "QuoteRequestAndResponseFeature",
                "FIX_SpecflowTests.Specs.QuoteRequestAndResponseFeature.QuoteRequestForAnInvalidCu" +
                "rrencySymbolReceivesAQuote",
                "True",
                "Error",
                "False",
                "0.058",
                "0"
            });
            table4.AddRow(new string[]
            {
                "QuoteRequestAndResponseFeature",
                "FIX_SpecflowTests.Specs.QuoteRequestAndResponseFeature.QuoteRequestForAnInvalidCu" +
                "rrencySymbolReceivesAQuoteRejection",
                "Success",
                "True",
                "True",
                "0.008",
                "3"
            });
            table4.AddRow(new string[]
            {
                "QuoteRequestAndResponseFeature",
                "FIX_SpecflowTests.Specs.QuoteRequestAndResponseFeature.QuoteRequestForAValidCurre" +
                "ncySymbolReceivesAQuote",
                "Success",
                "True",
                "True",
                "0.009",
                "1"
            });
#line 64
            testRunner.Then("the following test cases are found for these test suites:", ((string) (null)), table4,
                "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load an xml result file and find test cases by test case name")]
        [NUnit.Framework.CategoryAttribute("Jira1234")]
        public virtual void LoadAnXmlResultFileAndFindTestCasesByTestCaseName()
        {
            var scenarioInfo =
                new TechTalk.SpecFlow.ScenarioInfo("Load an xml result file and find test cases by test case name",
                    new string[]
                    {
                        "Jira1234"
                    });
#line 75
            this.ScenarioSetup(scenarioInfo);
#line 8
            this.FeatureBackground();
#line 76
            testRunner.When("I parse the xml test result file as a test-suite collection", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line hidden
            var table5 = new TechTalk.SpecFlow.Table(new string[]
            {
                "test case short name",
                "test suite name",
                "test case name",
                "executed",
                "result",
                "success",
                "time",
                "asserts"
            });
            table5.AddRow(new string[]
            {
                "AccessAStaticObjectFromShareContextOneScenarioOne",
                "ShareContextOneFeature",
                "Alpari.QualityAssurance.SpecFlowExtensions.Specs.ShareContextOneFeature.AccessASt" +
                "aticObjectFromShareContextOneScenarioOne",
                "True",
                "Success",
                "True",
                "0.352",
                "2"
            });
            table5.AddRow(new string[]
            {
                "AccessAStaticObjectFromShareContextOneScenarioTwo",
                "ShareContextOneFeature",
                "Alpari.QualityAssurance.SpecFlowExtensions.Specs.ShareContextOneFeature.AccessASt" +
                "aticObjectFromShareContextOneScenarioTwo",
                "True",
                "Success",
                "True",
                "0.001",
                "2"
            });
            table5.AddRow(new string[]
            {
                "AccessAStaticObjectFromShareContextTwoScenarioOne",
                "ShareContextTwoFeature",
                "Alpari.QualityAssurance.SpecFlowExtensions.Specs.ShareContextTwoFeature.AccessASt" +
                "aticObjectFromShareContextTwoScenarioOne",
                "True",
                "Success",
                "True",
                "0.002",
                "2"
            });
            table5.AddRow(new string[]
            {
                "AccessAStaticObjectFromShareContextTwoScenarioTwo",
                "ShareContextTwoFeature",
                "Alpari.QualityAssurance.SpecFlowExtensions.Specs.ShareContextTwoFeature.AccessASt" +
                "aticObjectFromShareContextTwoScenarioTwo",
                "True",
                "Success",
                "True",
                "0.001",
                "2"
            });
            table5.AddRow(new string[]
            {
                "QuoteRequestForAnInvalidCurrencySymbolReceivesAQuote",
                "QuoteRequestAndResponseFeature",
                "FIX_SpecflowTests.Specs.QuoteRequestAndResponseFeature.QuoteRequestForAnInvalidCu" +
                "rrencySymbolReceivesAQuote",
                "True",
                "Error",
                "False",
                "0.058",
                "0"
            });
            table5.AddRow(new string[]
            {
                "QuoteRequestForAnInvalidCurrencySymbolReceivesAQuoteRejection",
                "QuoteRequestAndResponseFeature",
                "FIX_SpecflowTests.Specs.QuoteRequestAndResponseFeature.QuoteRequestForAnInvalidCu" +
                "rrencySymbolReceivesAQuoteRejection",
                "True",
                "Success",
                "True",
                "0.008",
                "3"
            });
            table5.AddRow(new string[]
            {
                "QuoteRequestForAValidCurrencySymbolReceivesAQuote",
                "QuoteRequestAndResponseFeature",
                "FIX_SpecflowTests.Specs.QuoteRequestAndResponseFeature.QuoteRequestForAValidCurre" +
                "ncySymbolReceivesAQuote",
                "True",
                "Success",
                "True",
                "0.009",
                "1"
            });
#line 77
            testRunner.Then("the following test cases are found for these test suites keyed by \"test case name" +
                            "\":", ((string) (null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute(
            "Load an xml result file and find test cases by test case name with some comparsio" +
            "n differences")]
        [NUnit.Framework.CategoryAttribute("negative")]
        public virtual void LoadAnXmlResultFileAndFindTestCasesByTestCaseNameWithSomeComparsionDifferences()
        {
            var scenarioInfo =
                new TechTalk.SpecFlow.ScenarioInfo(
                    "Load an xml result file and find test cases by test case name with some comparsio" +
                    "n differences", new string[]
                    {
                        "negative"
                    });
#line 88
            this.ScenarioSetup(scenarioInfo);
#line 8
            this.FeatureBackground();
#line 89
            testRunner.When("I parse the xml test result file as a test-suite collection", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line hidden
            var table6 = new TechTalk.SpecFlow.Table(new string[]
            {
                "test case short name",
                "test suite name",
                "test case name",
                "executed",
                "result",
                "success",
                "time",
                "asserts"
            });
            table6.AddRow(new string[]
            {
                "AccessAStaticObjectFromShareContextOneScenarioOne",
                "ShareContextOneFeature",
                "Alpari.QualityAssurance.SpecFlowExtensions.Specs.ShareContextOneFeature.AccessASt" +
                "aticObjectFromShareContextOneScenarioOne",
                "True",
                "Success",
                "false",
                "0.352",
                "2"
            });
            table6.AddRow(new string[]
            {
                "AccessAStaticObjectFromShareContextOneScenarioTwo",
                "dtyjdtyjf",
                "Alpari.QualityAssurance.SpecFlowExtensions.Specs.ShareContextOneFeature.AccessASt" +
                "aticObjectFromShareContextOneScenarioTwo",
                "True",
                "Success",
                "True",
                "0.001",
                "2"
            });
            table6.AddRow(new string[]
            {
                "AccessAStaticObjectFromShareContextTwoScenarioOne",
                "ShareContextTwoFeature",
                "Alpari.QualityAssurance.SpecFlowExtensions.Specs.ShareContextTwoFeature.AccessASt" +
                "aticObjectFromShareContextTwoScenarioOne",
                "True",
                "srfjyj",
                "True",
                "0.002",
                "2"
            });
            table6.AddRow(new string[]
            {
                "AccessAStaticObjectFromShareContextTwoScenarioTwo",
                "ShareContextTwoFeature",
                "Alpari.QualityAssurance.SpecFlowExtensions.Specs.ShareContextTwoFeature.AccessASt" +
                "aticObjectFromShareContextTwoScenarioTwo",
                "True",
                "Success",
                "True",
                "0.001",
                "2"
            });
            table6.AddRow(new string[]
            {
                "QuoteRequestForAnInvalidCurrencySymbolReceivesAQuote",
                "QuoteRequestAndResponseFeature",
                "FIX_SpecflowTests.Specs.QuoteRequestAndResponseFeature.hwtrhwrjsrtjwrj",
                "True",
                "Error",
                "False",
                "0.058",
                "0"
            });
            table6.AddRow(new string[]
            {
                "QuoteRequestForAnInvalidCurrencySymbolReceivesAQuoteRejection",
                "QuoteRequestAndResponseFeature",
                "FIX_SpecflowTests.Specs.QuoteRequestAndResponseFeature.QuoteRequestForAnInvalidCu" +
                "rrencySymbolReceivesAQuoteRejection",
                "True",
                "Success",
                "True",
                "0.008",
                "3"
            });
            table6.AddRow(new string[]
            {
                "QuoteRequestForAValidCurrencySymbolReceivesAQuote",
                "QuoteRequestAndResponseFeature",
                "FIX_SpecflowTests.Specs.QuoteRequestAndResponseFeature.QuoteRequestForAValidCurre" +
                "ncySymbolReceivesAQuote",
                "True",
                "Success",
                "True",
                "0.009",
                "1"
            });
#line 90
            testRunner.Then("the following test cases are found for these test suites keyed by \"test case name" +
                            "\":", ((string) (null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Find a test case by tag name")]
        public virtual void FindATestCaseByTagName()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find a test case by tag name", ((string[]) (null)));
#line 101
            this.ScenarioSetup(scenarioInfo);
#line 8
            this.FeatureBackground();
#line 102
            testRunner.When("I parse the xml test result file as a test-suite collection", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line hidden
            var table7 = new TechTalk.SpecFlow.Table(new string[]
            {
                "tags",
                "test case short name",
                "test suite name"
            });
            table7.AddRow(new string[]
            {
                "@negative",
                "QuoteRequestForAnInvalidCurrencySymbolReceivesAQuote",
                "QuoteRequestAndResponseFeature"
            });
#line 103
            testRunner.Then("the following test cases are found for these test suites keyed by containing a \"t" +
                            "ags\" value:", ((string) (null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Find a test case with a test failure")]
        public virtual void FindATestCaseWithATestFailure()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find a test case with a test failure",
                ((string[]) (null)));
#line 107
            this.ScenarioSetup(scenarioInfo);
#line 8
            this.FeatureBackground();
#line 108
            testRunner.When("I parse the xml test result file as a test-suite collection", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line hidden
            var table8 = new TechTalk.SpecFlow.Table(new string[]
            {
                "test case short name",
                "message"
            });
            table8.AddRow(new string[]
            {
                "QuoteRequestForAnInvalidCurrencySymbolReceivesAQuote",
                "System.Collections.Generic.KeyNotFoundException : The given key was not present i" +
                "n the dictionary."
            });
#line 109
            testRunner.Then("the following test cases are found for these test suites keyed by \"test case shor" +
                            "t name\":", ((string) (null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load an xml result file and find culture-info")]
        public virtual void LoadAnXmlResultFileAndFindCulture_Info()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load an xml result file and find culture-info",
                ((string[]) (null)));
#line 113
            this.ScenarioSetup(scenarioInfo);
#line 8
            this.FeatureBackground();
#line 114
            testRunner.When("I parse the xml test result file as culture-info", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line 115
            testRunner.Then("a single culture-info object exists", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "Then ");
#line 116
            testRunner.And("a culture-info with a \"currentculture\" attribute value of \"en-GB\" exists",
                ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 117
            testRunner.And("a culture-info with a \"currentuiculture\" attribute value of \"en-US\" exists",
                ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}

#pragma warning restore

#endregion