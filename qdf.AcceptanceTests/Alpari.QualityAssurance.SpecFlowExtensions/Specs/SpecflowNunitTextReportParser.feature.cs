// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Alpari.QualityAssurance.SpecFlowExtensions.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SpecflowNunitTextReportParser")]
    [NUnit.Framework.CategoryAttribute("Reporting")]
    public partial class SpecflowNunitTextReportParserFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SpecflowNunitTextReportParser.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SpecflowNunitTextReportParser", "In order to provide detailed log info in te test results\r\nAs a tester\r\nI want the" +
                    " nunit report parser to match up the text output with the xml output", ProgrammingLanguage.CSharp, new string[] {
                        "Reporting"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
#line 8
 testRunner.Given("I have an xml test result file", "TestData\\TaggedTestResult.xml", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
 testRunner.And("I have a text test result file \"TestData\\TaggedTestResult.txt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load an xml result file and find test cases by test case name")]
        public virtual void LoadAnXmlResultFileAndFindTestCasesByTestCaseName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load an xml result file and find test cases by test case name", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 15
 testRunner.When("I parse the xml test result file as a test-suite collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Test case short name",
                        "Test suite name",
                        "Test case name",
                        "Executed",
                        "Result",
                        "Success",
                        "Time",
                        "Asserts"});
            table1.AddRow(new string[] {
                        "FailingTestOne",
                        "CreateMixtureOfTestResults001Feature",
                        "Alpari.QualityAssurance.SpecFlowExtensions.Specs.CreateMixtureOfTestResults001Fea" +
                            "ture.FailingTestOne",
                        "True",
                        "Failure",
                        "False",
                        "0.477",
                        "1"});
            table1.AddRow(new string[] {
                        "PassingTestOne",
                        "CreateMixtureOfTestResults001Feature",
                        "Alpari.QualityAssurance.SpecFlowExtensions.Specs.CreateMixtureOfTestResults001Fea" +
                            "ture.PassingTestOne",
                        "True",
                        "Success",
                        "True",
                        "0.005",
                        "1"});
            table1.AddRow(new string[] {
                        "PendingTestOne",
                        "CreateMixtureOfTestResults001Feature",
                        "Alpari.QualityAssurance.SpecFlowExtensions.Specs.CreateMixtureOfTestResults001Fea" +
                            "ture.PendingTestOne",
                        "True",
                        "Inconclusive",
                        "False",
                        "0.162",
                        "0"});
            table1.AddRow(new string[] {
                        "PendingTestTwo",
                        "CreateMixtureOfTestResults001Feature",
                        "Alpari.QualityAssurance.SpecFlowExtensions.Specs.CreateMixtureOfTestResults001Fea" +
                            "ture.PendingTestTwo",
                        "True",
                        "Inconclusive",
                        "False",
                        "0.006",
                        "0"});
            table1.AddRow(new string[] {
                        "FailingTestOne",
                        "CreateMixtureOfTestResults002Feature",
                        "Alpari.QualityAssurance.SpecFlowExtensions.Specs.CreateMixtureOfTestResults002Fea" +
                            "ture.FailingTestOne",
                        "True",
                        "Failure",
                        "False",
                        "0.003",
                        "1"});
            table1.AddRow(new string[] {
                        "PassingTestOne",
                        "CreateMixtureOfTestResults002Feature",
                        "Alpari.QualityAssurance.SpecFlowExtensions.Specs.CreateMixtureOfTestResults002Fea" +
                            "ture.PassingTestOne",
                        "True",
                        "Success",
                        "True",
                        "0.001",
                        "1"});
            table1.AddRow(new string[] {
                        "PassingTestOneTwo",
                        "CreateMixtureOfTestResults002Feature",
                        "Alpari.QualityAssurance.SpecFlowExtensions.Specs.CreateMixtureOfTestResults002Fea" +
                            "ture.PassingTestOneTwo",
                        "True",
                        "Success",
                        "True",
                        "0.001",
                        "1"});
            table1.AddRow(new string[] {
                        "PendingTestOneTwo",
                        "CreateMixtureOfTestResults002Feature",
                        "Alpari.QualityAssurance.SpecFlowExtensions.Specs.CreateMixtureOfTestResults002Fea" +
                            "ture.PendingTestOneTwo",
                        "True",
                        "Inconclusive",
                        "False",
                        "0.003",
                        "0"});
            table1.AddRow(new string[] {
                        "PendingTestTwoTwo",
                        "CreateMixtureOfTestResults002Feature",
                        "Alpari.QualityAssurance.SpecFlowExtensions.Specs.CreateMixtureOfTestResults002Fea" +
                            "ture.PendingTestTwoTwo",
                        "True",
                        "Inconclusive",
                        "False",
                        "0.002",
                        "0"});
#line 16
 testRunner.Then("the following test cases are found for these test suites keyed by \"Test case name" +
                    "\":", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load a text file")]
        public virtual void LoadATextFile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load a text file", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 29
 testRunner.Then("the text file parser contains some text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load a text file and check test cases are present")]
        public virtual void LoadATextFileAndCheckTestCasesArePresent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load a text file and check test cases are present", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 32
 testRunner.When("I parse the text test result file as a test-suite collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("the text file parser contains some test cases", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load a text file and check test cases with tags are present")]
        public virtual void LoadATextFileAndCheckTestCasesWithTagsArePresent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load a text file and check test cases with tags are present", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 36
 testRunner.When("I parse the text test result file as a test-suite collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("the text file parser contains some test cases with tags", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load a text file and check test cases with a primary tag are present")]
        public virtual void LoadATextFileAndCheckTestCasesWithAPrimaryTagArePresent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load a text file and check test cases with a primary tag are present", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 40
 testRunner.When("I parse the text test result file as a test-suite collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.Then("the text file parser contains some test cases with a primary tag", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load a text result file and find test cases by tag")]
        public virtual void LoadATextResultFileAndFindTestCasesByTag()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load a text result file and find test cases by tag", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 44
 testRunner.When("I parse the xml test result file as a test-suite collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.And("I parse the text test result file as a test-suite collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Tags",
                        "Test case short name",
                        "Test suite name"});
            table2.AddRow(new string[] {
                        "@TES-84",
                        "PendingTestTwoTwo",
                        "CreateMixtureOfTestResults002Feature"});
#line 46
 testRunner.Then("the following test case text results are found for these test suites keyed by con" +
                    "taining a \"Tags\" value:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
