// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Alpari.QualityAssurance.SecureMyPassword.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CryptoTests")]
    public partial class CryptoTestsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CryptoTests.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CryptoTests", "In order to protect passwords\r\nAs a concerned it user\r\nI want to be able to secur" +
                    "e my credentials", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Encypt and Decrypt Password")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void EncyptAndDecryptPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Encypt and Decrypt Password", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("my unencypted password is \"password\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When("encypt my password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.And("I decrypt the encrypted password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.Then("the decrypted password is \"password\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Encypt and Decrypt complex Password")]
        public virtual void EncyptAndDecryptComplexPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Encypt and Decrypt complex Password", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
 testRunner.Given("my unencypted password is \"server=10.25.9.213;user id=ars;password=1q2w3e;port=33" +
                    "06;database=cc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
 testRunner.When("encypt my password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.And("I decrypt the encrypted password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.Then("the decrypted password is \"server=10.25.9.213;user id=ars;password=1q2w3e;port=33" +
                    "06;database=cc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Direct Encypt and Decrypt Password")]
        public virtual void DirectEncyptAndDecryptPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Direct Encypt and Decrypt Password", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("my unencrypted password is \"password\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When("I directly encrypt my password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.And("I directly decrypt the encrypted password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.Then("the decrypted password is \"password\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Direct Encypt and Decrypt complex Password")]
        public virtual void DirectEncyptAndDecryptComplexPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Direct Encypt and Decrypt complex Password", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("my unencypted password is \"server=10.25.9.213;user id=ars;password=1q2w3e;port=33" +
                    "06;database=cc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.When("encypt my password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.And("I decrypt the encrypted password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.Then("the decrypted password is \"server=10.25.9.213;user id=ars;password=1q2w3e;port=33" +
                    "06;database=cc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Direct Decrypt complex Password")]
        public virtual void DirectDecryptComplexPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Direct Decrypt complex Password", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given(@"my encrypted password is ""1-0-0-0-208-140-157-223-1-21-209-17-140-122-0-192-79-194-151-235-1-0-0-0-13-245-5-48-90-188-159-68-139-87-217-81-43-30-196-135-0-0-0-0-2-0-0-0-0-0-3-102-0-0-192-0-0-0-16-0-0-0-55-80-201-201-1-50-209-112-34-132-130-147-230-183-100-118-0-0-0-0-4-128-0-0-160-0-0-0-16-0-0-0-93-51-247-192-205-5-134-215-44-213-61-184-232-21-130-192-72-0-0-0-241-90-230-235-188-172-166-89-249-171-59-98-199-126-142-87-185-176-247-34-152-255-165-99-62-252-153-246-86-217-198-162-189-64-222-163-176-135-33-241-209-68-236-146-8-216-80-7-9-120-39-18-35-72-223-147-153-104-66-232-39-201-212-166-77-63-252-171-61-149-25-137-20-0-0-0-130-229-133-157-179-54-159-143-162-94-7-224-39-234-16-57-171-23-215-212""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When("I decrypt the encrypted password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("the decrypted password is \"server=10.25.9.213;user id=ars;password=1q2w3e;port=33" +
                    "06;database=cc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Direct Decrypt complex Password2")]
        public virtual void DirectDecryptComplexPassword2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Direct Decrypt complex Password2", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given(@"my encrypted password is ""1-0-0-0-208-140-157-223-1-21-209-17-140-122-0-192-79-194-151-235-1-0-0-0-172-198-26-117-175-63-187-79-178-230-134-99-10-24-16-126-0-0-0-0-2-0-0-0-0-0-3-102-0-0-192-0-0-0-16-0-0-0-48-248-225-198-130-185-183-172-64-153-162-118-74-112-190-76-0-0-0-0-4-128-0-0-160-0-0-0-16-0-0-0-196-195-98-213-142-128-104-68-75-153-104-42-194-24-99-247-136-0-0-0-96-207-124-92-120-211-60-171-59-109-245-20-58-227-77-240-166-118-51-224-111-115-19-54-224-235-179-157-149-30-73-94-212-58-42-139-119-197-50-231-169-243-235-68-197-20-62-206-201-194-155-148-60-138-239-245-111-71-1-254-28-31-25-111-88-238-188-53-115-173-7-95-145-131-30-62-223-27-16-2-224-146-11-110-171-219-16-202-246-157-248-33-24-237-8-90-170-3-248-205-225-218-78-16-74-132-15-89-157-176-204-203-214-218-71-146-90-251-227-245-255-241-11-36-38-199-8-43-144-81-254-238-235-123-123-136-20-0-0-0-55-84-236-249-10-53-173-156-186-158-111-177-209-9-54-125-106-56-16-132""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.When("I decrypt the encrypted password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("the decrypted password is \"server=10.25.9.213;user id=ars;password=1q2w3e;port=33" +
                    "06;database=cc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
