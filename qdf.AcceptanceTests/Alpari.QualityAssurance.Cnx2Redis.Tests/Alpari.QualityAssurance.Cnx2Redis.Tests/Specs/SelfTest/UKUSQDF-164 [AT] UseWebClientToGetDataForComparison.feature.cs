// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Alpari.QualityAssurance.Cnx2Redis.Tests.Specs.SelfTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UKUSQDF-164 [AT] UseWebClientToGetDataForComparison")]
    [NUnit.Framework.CategoryAttribute("UKUSQDF_164")]
    [NUnit.Framework.CategoryAttribute("cnxHubTradeActivityImporter:WebClient")]
    public partial class UKUSQDF_164ATUseWebClientToGetDataForComparisonFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "UKUSQDF-164 [AT] UseWebClientToGetDataForComparison.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "UKUSQDF-164 [AT] UseWebClientToGetDataForComparison", "In order to verify Cnx2Redis data in the cnx-deals key\r\nAs a QDF Tester\r\nI want t" +
                    "o get cnx hub data via a scheduled job", ProgrammingLanguage.CSharp, new string[] {
                        "UKUSQDF_164",
                        "cnxHubTradeActivityImporter:WebClient"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Login",
                        "Name"});
            table1.AddRow(new string[] {
                        "AUKUS2102",
                        "Lucror"});
            table1.AddRow(new string[] {
                        "AUKUS2089",
                        "Chase Capital"});
            table1.AddRow(new string[] {
                        "AUKUS2065",
                        "Leverate Financial"});
            table1.AddRow(new string[] {
                        "AUKUS2095",
                        "TradingServices"});
            table1.AddRow(new string[] {
                        "AUKUS2099",
                        "BostonPrime"});
            table1.AddRow(new string[] {
                        "AUKUS2106",
                        "Gedik"});
            table1.AddRow(new string[] {
                        "AUKUS2033",
                        "Forex Financial"});
            table1.AddRow(new string[] {
                        "AUKUS1004",
                        "Royal Forex Trading"});
            table1.AddRow(new string[] {
                        "AUKP2962",
                        "Accurate Investment"});
            table1.AddRow(new string[] {
                        "AUKUS2026",
                        "TTCM Traders Trust"});
            table1.AddRow(new string[] {
                        "AUKP3064",
                        "Fidus SAL"});
            table1.AddRow(new string[] {
                        "AUKP2848",
                        "Aganex"});
            table1.AddRow(new string[] {
                        "AUKUS2078",
                        "Scope"});
            table1.AddRow(new string[] {
                        "AUKP3156",
                        "Gerhardus"});
            table1.AddRow(new string[] {
                        "AUKP3399",
                        "Atef Abdulrahman Mohammed AlNuwaiser"});
            table1.AddRow(new string[] {
                        "AUKP3038",
                        "Arab International"});
            table1.AddRow(new string[] {
                        "AUKP1050",
                        "Bailey"});
            table1.AddRow(new string[] {
                        "AUKP3233",
                        "Mohammad Najmudeen"});
            table1.AddRow(new string[] {
                        "AUKP2193",
                        "Uros Frantar"});
            table1.AddRow(new string[] {
                        "AUKP3216",
                        "Javier Timerman"});
#line 8
testRunner.Given("I have this list of takers to load from cnx hub", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check with valid data")]
        [NUnit.Framework.TestCaseAttribute("07/29/2014", null)]
        [NUnit.Framework.TestCaseAttribute("07/30/2014", null)]
        [NUnit.Framework.TestCaseAttribute("07/31/2014", null)]
        [NUnit.Framework.TestCaseAttribute("08/01/2014", null)]
        [NUnit.Framework.TestCaseAttribute("08/04/2014", null)]
        public virtual void CheckWithValidData(string reportDate, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check with valid data", exampleTags);
#line 31
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "DealSource",
                        "DealType"});
            table2.AddRow(new string[] {
                        "cnx-deals",
                        "BookLessDeal"});
#line 32
 testRunner.Given("I have the following search criteria for qdf deals", ((string)(null)), table2, "Given ");
#line 35
 testRunner.When(string.Format("I load cnx trade activities for \"{0}\" for the included logins", reportDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
  testRunner.And("I retrieve the qdf deal data filtered by cnx hub start and end times and by inclu" +
                    "ded logins", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ExcludedFields"});
            table3.AddRow(new string[] {
                        "Comment"});
            table3.AddRow(new string[] {
                        "AccountGroup"});
            table3.AddRow(new string[] {
                        "Book"});
            table3.AddRow(new string[] {
                        "OrderId"});
            table3.AddRow(new string[] {
                        "State"});
#line 37
  testRunner.And("I compare the cnx hub trade deals with the qdf deal data excluding these fields:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ExportType",
                        "Overwrite"});
            table4.AddRow(new string[] {
                        "DataTableToCsv",
                        "true"});
#line 44
 testRunner.Then("the cnx hub trade deals should match the qdf deal data exactly:-", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check with a report date with known errors")]
        [NUnit.Framework.TestCaseAttribute("07/28/2014", null)]
        public virtual void CheckWithAReportDateWithKnownErrors(string reportDate, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check with a report date with known errors", exampleTags);
#line 55
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "DealSource",
                        "DealType"});
            table5.AddRow(new string[] {
                        "cnx-deals",
                        "BookLessDeal"});
#line 56
 testRunner.Given("I have the following search criteria for qdf deals", ((string)(null)), table5, "Given ");
#line 59
 testRunner.When(string.Format("I load cnx trade activities for \"{0}\" for the included logins", reportDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
  testRunner.And("I retrieve the qdf deal data filtered by cnx hub start and end times and by inclu" +
                    "ded logins", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ExcludedFields"});
            table6.AddRow(new string[] {
                        "Comment"});
            table6.AddRow(new string[] {
                        "AccountGroup"});
            table6.AddRow(new string[] {
                        "Book"});
            table6.AddRow(new string[] {
                        "OrderId"});
            table6.AddRow(new string[] {
                        "State"});
#line 61
  testRunner.And("I compare the cnx hub trade deals with the qdf deal data excluding these fields:", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ExportType"});
            table7.AddRow(new string[] {
                        "DataTableToConsole"});
#line 68
 testRunner.Then("the cnx hub trade deals compared with the qdf deal data should contain 40 \"mismat" +
                    "ches\":-", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check with a report date with no data")]
        [NUnit.Framework.TestCaseAttribute("08/02/2014", null)]
        [NUnit.Framework.TestCaseAttribute("08/03/2014", null)]
        public virtual void CheckWithAReportDateWithNoData(string reportDate, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check with a report date with no data", exampleTags);
#line 77
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "DealSource",
                        "DealType"});
            table8.AddRow(new string[] {
                        "cnx-deals",
                        "BookLessDeal"});
#line 78
 testRunner.Given("I have the following search criteria for qdf deals", ((string)(null)), table8, "Given ");
#line 81
 testRunner.When(string.Format("I load cnx trade activities for \"{0}\" for the included logins", reportDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
  testRunner.And("I retrieve the qdf deal data filtered by cnx hub start and end times and by inclu" +
                    "ded logins", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ExcludedFields"});
            table9.AddRow(new string[] {
                        "Comment"});
            table9.AddRow(new string[] {
                        "AccountGroup"});
            table9.AddRow(new string[] {
                        "Book"});
            table9.AddRow(new string[] {
                        "OrderId"});
            table9.AddRow(new string[] {
                        "State"});
#line 83
  testRunner.And("I compare the cnx hub trade deals with the qdf deal data excluding these fields:", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ExportType",
                        "Overwrite"});
            table10.AddRow(new string[] {
                        "DataTableToCsv",
                        "true"});
#line 90
 testRunner.Then("the cnx hub trade deals should match the qdf deal data exactly:-", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
