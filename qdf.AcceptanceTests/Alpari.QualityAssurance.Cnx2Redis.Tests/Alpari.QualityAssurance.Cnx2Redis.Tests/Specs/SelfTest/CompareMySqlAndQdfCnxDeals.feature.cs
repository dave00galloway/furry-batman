// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Alpari.QualityAssurance.Cnx2Redis.Tests.Specs.SelfTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CompareMySqlAndQdfCnxDeals")]
    [NUnit.Framework.CategoryAttribute("UKUSQDF_92")]
    [NUnit.Framework.CategoryAttribute("UKUSQDF_117")]
    [NUnit.Framework.CategoryAttribute("redisLocalhost")]
    [NUnit.Framework.CategoryAttribute("RedisDataImportParams:deal:cnx_deals:TestData\\cnx.csv")]
    [NUnit.Framework.CategoryAttribute("MySqlLocalhost")]
    public partial class CompareMySqlAndQdfCnxDealsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CompareMySqlAndQdfCnxDeals.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "CompareMySqlAndQdfCnxDeals", "In order to test Cnx2Redis\r\nAs a QDF Tester\r\nI want to be able to compare data fr" +
                    "om MySql and Redis", ProgrammingLanguage.CSharp, new string[] {
                        "UKUSQDF_92",
                        "UKUSQDF_117",
                        "redisLocalhost",
                        "RedisDataImportParams:deal:cnx_deals:TestData\\cnx.csv",
                        "MySqlLocalhost"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Compare small range of deals where side is incorrect excluding known issues")]
        public virtual void CompareSmallRangeOfDealsWhereSideIsIncorrectExcludingKnownIssues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compare small range of deals where side is incorrect excluding known issues", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "DealSource",
                        "ConvertedStartTime",
                        "ConvertedEndTime"});
            table1.AddRow(new string[] {
                        "cnx-deals",
                        "2014-07-10  01:29:21",
                        "2014-07-10  01:30:04"});
#line 34
 testRunner.Given("I have the following search criteria for qdf deals", ((string)(null)), table1, "Given ");
#line 37
  testRunner.When("I retrieve the qdf deal data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "DealId"});
            table2.AddRow(new string[] {
                        "B20141910A7K300"});
            table2.AddRow(new string[] {
                        "B20141910A7L300"});
            table2.AddRow(new string[] {
                        "B20141910A7L700"});
            table2.AddRow(new string[] {
                        "B2014191054GN00"});
            table2.AddRow(new string[] {
                        "B201419106E6U00"});
            table2.AddRow(new string[] {
                        "B20141910A7LS00"});
            table2.AddRow(new string[] {
                        "B201419106E7600"});
            table2.AddRow(new string[] {
                        "B201419107NV800"});
            table2.AddRow(new string[] {
                        "B201419107NVA00"});
            table2.AddRow(new string[] {
                        "B20141910A7MN00"});
            table2.AddRow(new string[] {
                        "B20141910A7R800"});
            table2.AddRow(new string[] {
                        "B20141910A7RA00"});
            table2.AddRow(new string[] {
                        "B20141910A7SV00"});
            table2.AddRow(new string[] {
                        "B201419106E7Z00"});
#line 38
  testRunner.And("I query cnx trade by trade id for these trade ids:", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ExcludedFields"});
            table3.AddRow(new string[] {
                        "Comment"});
#line 54
  testRunner.And("I compare the cnx trade deals with the qdf deal data excluding these fields:", ((string)(null)), table3, "And ");
#line 57
  testRunner.Then("the cnx trade deals should match the qdf deal data exactly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Compare small range of deals where side is incorrect and find all expected record" +
            "s")]
        public virtual void CompareSmallRangeOfDealsWhereSideIsIncorrectAndFindAllExpectedRecords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compare small range of deals where side is incorrect and find all expected record" +
                    "s", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "DealSource",
                        "ConvertedStartTime",
                        "ConvertedEndTime"});
            table4.AddRow(new string[] {
                        "cnx-deals",
                        "2014-07-10  01:29:21",
                        "2014-07-10  01:30:04"});
#line 61
 testRunner.Given("I have the following search criteria for qdf deals", ((string)(null)), table4, "Given ");
#line 64
  testRunner.When("I retrieve the qdf deal data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "DealId"});
            table5.AddRow(new string[] {
                        "B20141910A7K300"});
            table5.AddRow(new string[] {
                        "B20141910A7L300"});
            table5.AddRow(new string[] {
                        "B20141910A7L700"});
            table5.AddRow(new string[] {
                        "B2014191054GN00"});
            table5.AddRow(new string[] {
                        "B201419106E6U00"});
            table5.AddRow(new string[] {
                        "B20141910A7LS00"});
            table5.AddRow(new string[] {
                        "B201419106E7600"});
            table5.AddRow(new string[] {
                        "B201419107NV800"});
            table5.AddRow(new string[] {
                        "B201419107NVA00"});
            table5.AddRow(new string[] {
                        "B20141910A7MN00"});
            table5.AddRow(new string[] {
                        "B20141910A7R800"});
            table5.AddRow(new string[] {
                        "B20141910A7RA00"});
            table5.AddRow(new string[] {
                        "B20141910A7SV00"});
            table5.AddRow(new string[] {
                        "B201419106E7Z00"});
#line 65
  testRunner.And("I query cnx trade by trade id for these trade ids:", ((string)(null)), table5, "And ");
#line 81
  testRunner.And("I compare the cnx trade deals with the qdf deal data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
  testRunner.Then("the cnx trade deals should contain the same deals as the qdf deal data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
