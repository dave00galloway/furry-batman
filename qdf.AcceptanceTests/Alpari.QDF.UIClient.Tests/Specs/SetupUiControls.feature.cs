// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Alpari.QDF.UIClient.Tests.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SetupUIControls")]
    public partial class SetupUIControlsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SetupUiControls.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SetupUIControls", "In order to select search options\r\nAs a QDF Analyst\r\nI want search options to be " +
                    "accurate and complete", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set up trade server list")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void SetUpTradeServerList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set up trade server list", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I filter deals by server", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Server"});
            table1.AddRow(new string[] {
                        "Unknown"});
            table1.AddRow(new string[] {
                        "Mt4CapitalBankJordan"});
            table1.AddRow(new string[] {
                        "Mt4Pro"});
            table1.AddRow(new string[] {
                        "Currenex"});
            table1.AddRow(new string[] {
                        "Mt4Micro1"});
            table1.AddRow(new string[] {
                        "Mt4Micro2"});
            table1.AddRow(new string[] {
                        "Mt4Classic1"});
            table1.AddRow(new string[] {
                        "Mt4Classic2"});
            table1.AddRow(new string[] {
                        "Mt4JapaneseC1"});
            table1.AddRow(new string[] {
                        "Mt5Pro"});
            table1.AddRow(new string[] {
                        "Mt4MarketMena"});
            table1.AddRow(new string[] {
                        "Mt4SpreadBetting"});
            table1.AddRow(new string[] {
                        "Mt4Market1"});
            table1.AddRow(new string[] {
                        "Mt4B2B"});
            table1.AddRow(new string[] {
                        "Coverage101"});
            table1.AddRow(new string[] {
                        "Coverage601"});
            table1.AddRow(new string[] {
                        "Coverage602"});
            table1.AddRow(new string[] {
                        "Coverage604"});
#line 9
 testRunner.Then("the list of server options should be:", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Set up book list")]
        public virtual void SetUpBookList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set up book list", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("I filter deals by book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Book"});
            table2.AddRow(new string[] {
                        "None"});
            table2.AddRow(new string[] {
                        "A"});
            table2.AddRow(new string[] {
                        "B"});
#line 32
 testRunner.Then("the list of book options should be:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
